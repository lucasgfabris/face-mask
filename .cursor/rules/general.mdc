---
alwaysApply: true
---

# Regras Gerais do Projeto Angular Onboarding Yooga

## üéØ Arquitetura e Organiza√ß√£o

### Estrutura de Componentes

- **Standalone Components**: Todos os componentes devem ser standalone (`standalone: true`)
- **Organiza√ß√£o de pastas**:
  - `src/app/pages/` - P√°ginas principais (landing, onboarding-welcome, onboarding-steps, yooga-platform)
  - `src/app/steps/` - Componentes de etapas do onboarding (setup-\*)
  - `src/app/shared/` - Componentes reutiliz√°veis (field, tab-group, tag-selectable)
  - `src/app/core/services/` - Servi√ßos compartilhados
  - `src/app/layout/` - Componentes de layout
  - `src/app/features/` - Features modulares

### Conven√ß√µes de Nomenclatura

- Componentes de setup: `setup-{nome}.component.ts`
- Servi√ßos: `{nome}.service.ts`
- Use kebab-case para nomes de arquivos
- Use PascalCase para classes
- Use camelCase para vari√°veis e m√©todos

#### Nomes de Vari√°veis Descritivos

**SEMPRE use nomes descritivos para vari√°veis, mesmo em contextos curtos:**

```typescript
// ‚úÖ CORRETO - Nomes descritivos
const formData = this.itemForm();
const currentSeconds = this.secondsLeft();
const selectedFile = event.target.files?.[0];
const restaurantName = this.lead.restaurantName;

for (let taskIndex = 0; taskIndex < tasks.length; taskIndex++) {
  const task = tasks[taskIndex];
}

for (let firstIndex = 0; firstIndex < items.length; firstIndex++) {
  for (let secondIndex = firstIndex + 1; secondIndex < items.length; secondIndex++) {
    const firstRange = items[firstIndex];
    const secondRange = items[secondIndex];
  }
}

// ‚ùå ERRADO - Nomes n√£o descritivos
const f = this.itemForm();
const v = this.secondsLeft();
const s = this.lead.restaurantName;
let i = 0;
let t = tasks[0];

for (let i = 0; i < items.length; i++) {
  const a = items[i];
  const b = items[i + 1];
}
```

**Exce√ß√µes aceit√°veis:**

- `i`, `j`, `k` APENAS em loops muito simples (< 5 linhas) onde o contexto √© √≥bvio
- Par√¢metros de callback quando o tipo √© claro: `.map(item => item.name)` ou `.filter((_, index) => ...)`
- Vari√°veis matem√°ticas convencionais: `x`, `y` para coordenadas, `n` para n√∫meros em contextos matem√°ticos claros

## üîß Angular Best Practices

### Inje√ß√£o de Depend√™ncias

**SEMPRE use a fun√ß√£o `inject()` ao inv√©s de constructor injection:**

```typescript
// ‚úÖ CORRETO
import { Component, inject } from "@angular/core";

export class MyComponent {
  private router = inject(Router);
  private myService = inject(MyService);
}

// ‚ùå ERRADO
export class MyComponent {
  constructor(
    private router: Router,
    private myService: MyService
  ) {}
}
```

### Signals (Estado Reativo)

- Use `signal()` para estado local reativo
- Use `computed()` para valores derivados
- Exemplo: `myValue = signal<string>('');`

### Imports

- Importe `inject` sempre que usar inje√ß√£o de depend√™ncias
- Agrupe imports por categoria: Angular core, Angular common, local imports

## ‚ôø Acessibilidade (WCAG)

### Elementos Interativos

**SEMPRE torne elementos clic√°veis acess√≠veis por teclado:**

```html
<!-- ‚úÖ CORRETO - Elemento div com click -->
<div
  role="button"
  tabindex="0"
  (click)="handleClick()"
  (keydown.enter)="handleClick()"
  (keydown.space)="handleClick()"
  class="cursor-pointer..."
>
  Conte√∫do
</div>

<!-- ‚ùå ERRADO -->
<div (click)="handleClick()" class="cursor-pointer...">Conte√∫do</div>
```

### Labels e Form Controls

**SEMPRE associe labels aos inputs usando `for` e `id`:**

```html
<!-- ‚úÖ CORRETO -->
<label for="userName" class="...">Nome do Usu√°rio</label>
<input id="userName" type="text" [(ngModel)]="userName" />

<!-- ‚ùå ERRADO -->
<label class="...">Nome do Usu√°rio</label>
<input type="text" [(ngModel)]="userName" />
```

### Modais e Dialogs

- Use `role="dialog"` e `aria-modal="true"` em modais
- Use `role="document"` no conte√∫do do modal
- Adicione `(keydown.escape)="closeModal()"` para fechar com ESC

## üé® Styling e Design System

### Tailwind CSS Classes

- Use as classes personalizadas do Yooga:
  - `rounded-yooga-sm`, `rounded-yooga-md`, `rounded-yooga-lg`
  - `shadow-yooga`, `shadow-yooga-button`
  - Cores: `yooga-primary`, `yooga-secondary`, `yooga-accent`, `yooga-blue-{50-700}`

### Consist√™ncia Visual

- Altura padr√£o de inputs: `h-12` ou `h-14`
- Border padr√£o: `border border-gray-200` ou `border-[#CED2D3]`
- Focus state: `focus:border-yooga-primary` ou `focus:border-[#0B7CBE]`
- Transi√ß√µes: sempre adicione `transition-all duration-200` em elementos interativos

## üìù TypeScript

### Type Safety

**NUNCA use `any`, sempre especifique tipos:**

```typescript
// ‚úÖ CORRETO
private timer: number | null = null;
const list = items.map((item) => item.name);

// ‚ùå ERRADO
private timer: any = null;
const list = items.map((item: any) => item.name);
```

### Destructuring

- Use destructuring nomeado ao inv√©s de `_` para par√¢metros n√£o utilizados:

```typescript
// ‚úÖ CORRETO
.filter(([, config]) => config.active)
.map(([key]) => key)

// ‚ùå ERRADO
.filter(([_, config]) => config.active)
.map(([key, _]) => key)
```

## üß™ Formul√°rios

### Template-Driven Forms

- Use `FormsModule` e `[(ngModel)]` para binding bidirecional
- Sempre adicione valida√ß√µes: `required`, `minlength`, `pattern`, etc.
- Use template references: `#myControl="ngModel"`
- Mostre mensagens de erro condicionalmente: `*ngIf="myControl.invalid && myControl.touched"`

### Form IDs

- Sempre adicione IDs √∫nicos aos inputs
- Use IDs descritivos: `userName`, `storeAddress`, `responsibleEmail`
- Evite IDs duplicados, use sufixos se necess√°rio: `whatsapp1`, `whatsapp2`

## üé≠ Templates

### Inline Templates

- Templates pequenos (< 100 linhas) podem ser inline no componente
- Templates grandes devem estar em arquivo separado `.html`

### Conditional Rendering

- Use `*ngIf` para renderiza√ß√£o condicional
- Use `*ngFor` com `trackBy` quando apropriado
- Use `[ngClass]` para classes din√¢micas
- Use `[class]` para binding de classes complexas

### Accessibility Attributes

```html
<!-- Sempre adicione atributos ARIA apropriados -->
<button aria-label="Fechar modal" (click)="close()">√ó</button>
<img src="..." alt="Descri√ß√£o significativa" />
<input type="text" placeholder="Digite aqui" />
```

## üîÑ Navega√ß√£o e Routing

### Setup Navigation Service

- Use `SetupNavigationService` para navega√ß√£o entre etapas
- M√©todos dispon√≠veis:
  - `navigateToNext(route: string)` - Navegar para pr√≥xima etapa
  - `setOnboardingData(data)` - Armazenar dados do onboarding
  - `getLeadFromSession()` - Recuperar dados de lead
  - `setResponsibleName(name)` - Definir nome do respons√°vel

### Router

- Use `inject(Router)` para navega√ß√£o program√°tica
- Use `router.navigateByUrl('/path')` para navega√ß√£o

## üì¶ Componentes Compartilhados

### FieldComponent

```html
<app-field label="Nome do Campo" for="inputId">
  <input id="inputId" type="text" [(ngModel)]="value" />
</app-field>
```

### TabGroupComponent

- Use com array de `TabItem[]` com `id`, `label`, `selected`
- Emite evento `(tabSelected)` com o ID selecionado

### TagSelectableComponent

- Use com array de `TagItem[]` com `id`, `label`, `selected`
- Emite evento `(tagSelected)` com o ID selecionado

## üé® Padr√µes de UI

### Bot√µes

```html
<!-- Bot√£o prim√°rio -->
<button
  class="h-12 rounded-yooga-md bg-yooga-secondary px-6 font-medium text-yooga-accent shadow-yooga-button transition-all duration-200 hover:bg-yooga-primary hover:text-white"
>
  Texto do Bot√£o
</button>

<!-- Bot√£o secund√°rio -->
<button class="h-12 rounded-yooga-md border border-gray-200 px-4 text-gray-700 hover:bg-gray-50">
  Texto
</button>
```

### Cards com Sele√ß√£o

```html
<div
  role="button"
  tabindex="0"
  [class]="selected ? 'border-2 border-yooga-blue-600 bg-yooga-blue-50' : 'border border-gray-200 bg-white'"
  (click)="select()"
  (keydown.enter)="select()"
  (keydown.space)="select()"
  class="cursor-pointer rounded-yooga-md p-4 transition-all"
>
  <!-- Conte√∫do -->
</div>
```

### Radio/Checkbox Visual Customizado

```html
<div
  class="flex h-5 w-5 items-center justify-center rounded-full"
  [class]="selected ? 'bg-yooga-secondary' : 'border-2 border-gray-300'"
>
  <div *ngIf="selected" class="h-1 w-1 rounded-full bg-yooga-accent"></div>
</div>
```

## üß© Padr√µes de Estado

### Signals Pattern

```typescript
// Estado local
myValue = signal<string>("");
isLoading = signal<boolean>(false);
items = signal<Item[]>([]);

// Valores computados
filteredItems = computed(() => {
  return this.items().filter((item) => item.active);
});

// Atualizar signals
this.myValue.set("novo valor");
this.items.set([...newItems]);
```

### Form State

```typescript
formData = signal({
  field1: '',
  field2: 0,
  field3: false,
});

// Atualizar campo espec√≠fico
update(field: string, value: any) {
  this.formData.set({ ...this.formData(), [field]: value });
}
```

## üì± Responsividade

### Breakpoints Tailwind

- `sm:` - 640px
- `md:` - 768px
- `lg:` - 1024px
- `xl:` - 1280px

### Grid Responsivo

```html
<div class="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
  <!-- Conte√∫do -->
</div>
```

## ‚ö° Performance

### Lazy Loading

- Componentes de steps s√£o carregados sob demanda via routing
- Use code splitting para otimizar bundles

### Change Detection

- Evite opera√ß√µes custosas em templates
- Use `trackBy` em `*ngFor` quando apropriado

## üîí Valida√ß√£o e Tratamento de Erros

### Form Validation

```html
<input #myControl="ngModel" [(ngModel)]="value" required minlength="2" />
<p *ngIf="myControl.invalid && (myControl.touched || submitted)" class="text-red-600">
  Mensagem de erro
</p>
```

### Try-Catch para Storage

```typescript
try {
  sessionStorage.setItem("key", JSON.stringify(data));
} catch {
  // Silently fail if sessionStorage is unavailable
}
```

## üéØ ESLint Rules

### Regras Ativas

- `@angular-eslint/prefer-inject` - Use inject() ao inv√©s de constructor
- `@angular-eslint/template/click-events-have-key-events` - Adicione eventos de teclado
- `@angular-eslint/template/interactive-supports-focus` - Elementos interativos devem ser foc√°veis
- `@angular-eslint/template/label-has-associated-control` - Labels devem ter `for`
- `@typescript-eslint/no-explicit-any` - N√£o use `any`
- `@typescript-eslint/no-unused-vars` - Remova vari√°veis n√£o utilizadas

## üìö Imports Essenciais

### Component Imports Comuns

```typescript
import { Component, signal, computed, inject } from "@angular/core";
import { CommonModule } from "@angular/common";
import { FormsModule } from "@angular/forms";
import { Router } from "@angular/router";
```

## üé® Design Tokens

### Cores Principais

- Primary: `#0D547F` (yooga-accent)
- Secondary: `#83CEF6` (yooga-secondary)
- Blue 600: `#0B7CBE` (yooga-blue-600)
- Blue 50: `#F1F9FE` (yooga-blue-50)
- Success: `#2FC26E`
- Error: `#EF4444`

### Espa√ßamentos

- Gaps pequenos: `gap-2` (8px)
- Gaps m√©dios: `gap-4` (16px)
- Gaps grandes: `gap-6` (24px)
- Padding de cards: `p-4 md:p-6 lg:p-8`

## üß™ Testing

### Estrutura de Testes

- Arquivos de teste: `*.spec.ts`
- Coverage em `coverage/fusion-angular-tailwind-starter/`
- Execute testes com: `npm test`

## üöÄ Build e Deploy

### Scripts Dispon√≠veis

- `npm run lint` - Verificar erros de lint
- `npm run format` - Formatar c√≥digo com Prettier
- `npm run build` - Build de produ√ß√£o
- `npm test` - Executar testes

### Pr√©-commit Checklist

1. ‚úÖ C√≥digo sem erros de lint (`npm run lint`)
2. ‚úÖ C√≥digo formatado (`npm run format`)
3. ‚úÖ Build sem erros (`npm run build`)
4. ‚úÖ Testes passando (se aplic√°vel)

## üéØ Padr√µes Espec√≠ficos do Projeto

### SessionStorage

- Prefixo: `yooga.{nome}` (ex: `yooga.lead`)
- Sempre use try-catch ao acessar sessionStorage
- Dados do lead: `sessionStorage.getItem('yooga.lead')`

### Navigation Service

- Centralize l√≥gica de navega√ß√£o no `SetupNavigationService`
- Armazene dados de onboarding no servi√ßo
- Use para compartilhar estado entre etapas

### File Uploads

- Use inputs hidden: `<input #fileInput type="file" accept="image/*" />`
- Trigger programaticamente: `fileInput.click()`
- Gere previews com `FileReader`

### Valida√ß√£o de Campos

```typescript
// Pattern para campos preenchidos
fieldFilled(field: string): boolean {
  const value = this.data()[field];
  return !!value && value.toString().trim() !== '';
}

// Classes din√¢micas
filledClass(field: string): string {
  return this.fieldFilled(field)
    ? 'border-[#2FC26E] bg-[#F3FFF9] text-[#4B5053]'
    : '';
}
```

## üé® Componentes Visuais Recorrentes

### Indicador de Campo Preenchido

```html
<div
  *ngIf="fieldFilled('fieldName')"
  class="pointer-events-none absolute right-3 top-1/2 flex h-6 w-6 -translate-y-1/2 items-center justify-center rounded-full bg-[#DFF7EB]"
>
  <svg width="14" height="14" viewBox="0 0 14 14" fill="none">
    <path
      d="M10.6667 4.6665L6.41667 8.9165L4 6.49984"
      stroke="#1F5C2F"
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
  </svg>
</div>
```

### Loading Spinner

```html
<div
  class="h-12 w-12 animate-spin rounded-full border-2 border-gray-200 border-t-yooga-primary"
></div>
```

### Progress Bar

```html
<div class="h-1 overflow-hidden rounded-full bg-gray-200">
  <div
    class="h-full rounded-full bg-yooga-blue-600 transition-all duration-300"
    [style.width.%]="progress"
  ></div>
</div>
```

## üîê Type Safety

### Interfaces e Types

- Defina interfaces para dados complexos
- Use tipos literais para op√ß√µes fixas: `'delivery' | 'presencial' | 'both'`
- Use tipos gen√©ricos quando apropriado

### Type Guards

```typescript
// Ao acessar propriedades din√¢micas
"propertyName" in object && object.propertyName ? object.propertyName : defaultValue;

// Com casting seguro
const value = ("prop" in obj ? obj.prop : "default") as SpecificType;
```

## üìã Forms Pattern

### Multi-Step Forms

```typescript
step = signal<1 | 2 | 3>(1);
submitted = false;

next(form: NgForm) {
  this.submitted = true;
  if (form.invalid) return;
  this.submitted = false;
  this.step.set(this.step() + 1);
}
```

### Form Models

```typescript
interface FormData {
  field1: string;
  field2: number;
  field3?: boolean;
}

formData = signal<FormData>({
  field1: "",
  field2: 0,
});
```

## üåê i18n e Localiza√ß√£o

### Textos em PT-BR

- Todos os textos devem estar em portugu√™s brasileiro
- Use placeholder descritivos
- Mensagens de erro claras e amig√°veis

### Formata√ß√£o

- Moeda: `R$ 0,00`
- Telefone: `(00) 00000-0000`
- CEP: `00000-000`
- CNPJ: `00.000.000/0001-00`

## üßπ Code Quality

### Clean Code

- M√©todos pequenos e focados
- Nomes descritivos
- Evite aninhamento profundo
- Use early returns

### Comments

- Comente apenas l√≥gica complexa
- Use coment√°rios em portugu√™s
- Prefira c√≥digo auto-explicativo

### Consistency

- Indenta√ß√£o: 2 espa√ßos
- Aspas: duplas para HTML, simples para TS quando poss√≠vel
- Ponto e v√≠rgula: sempre ao final de statements

## üîç Debugging

### Console Logs

- Use `console.log` apenas para debug tempor√°rio
- Remova antes de commit
- Use optional chaining: `data?.field?.subfield`

## üì¶ Exports e Barrel Files

### Shared Module

- Exporte componentes compartilhados via `src/app/shared/index.ts`
- Facilita imports: `import { FieldComponent } from '@shared';`

## ‚öôÔ∏è Environment e Config

### Configuration Files

- `angular.json` - Configura√ß√£o do Angular CLI
- `tailwind.config.js` - Configura√ß√£o do Tailwind
- `tsconfig.json` - Configura√ß√£o TypeScript
- `eslint.config.js` - Regras de linting

## üéØ Checklist de Revis√£o de C√≥digo

Antes de marcar qualquer feature como completa, verifique:

- [ ] Componente usa `inject()` ao inv√©s de constructor injection
- [ ] Todos os elementos interativos s√£o acess√≠veis por teclado
- [ ] Todos os labels t√™m `for` associado aos inputs
- [ ] N√£o h√° uso de `any` sem justificativa
- [ ] N√£o h√° vari√°veis n√£o utilizadas
- [ ] C√≥digo est√° formatado (`npm run format`)
- [ ] Sem erros de lint (`npm run lint`)
- [ ] Build funciona (`npm run build`)
- [ ] Responsivo em mobile, tablet e desktop
- [ ] Estados de loading/error tratados
- [ ] Valida√ß√µes de formul√°rio implementadas
- [ ] Feedback visual adequado para a√ß√µes do usu√°rio

## üé® Conven√ß√µes de Estilo Espec√≠ficas

### Hover States

- Bot√µes: `hover:bg-{cor}` + `hover:text-{cor}`
- Cards: `hover:border-{cor}` ou `hover:bg-gray-50`
- Links: `hover:underline` ou `hover:no-underline`

### Focus States

- Inputs: `focus:border-yooga-primary` + `focus:outline-none`
- Buttons: Native focus ring ou custom com `focus:ring-2`

### Disabled States

- Use `[disabled]` com l√≥gica apropriada
- Adicione classes: `disabled:opacity-50 disabled:cursor-not-allowed`

---

**√öltima atualiza√ß√£o**: 02/10/2025
**Vers√£o**: 1.0.0